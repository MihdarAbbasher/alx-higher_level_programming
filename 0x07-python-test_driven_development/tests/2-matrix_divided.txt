::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

The original matrix is unchanged.

::

    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]

Integers and floats can be combined.

::

    >>> matrix = [
    ...     [1, -2.2, 3, 4.4, 5],
    ...     [-6.6, 7.00, 8, 9.999, 10]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]

The parameter ``matrix`` must be a list of lists consisting of ints or
floats. If ``matrix`` if not, a TypeError is raised.

::

    >>> matrix = "hhh"
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Empty list will raise TypeError.

::

    >>> matrix = []
    >>> print(matrix_divided(matrix, 5))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

But an empty list of lists will not.

::

    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    [[]]

The same TypeError is raised yet again if any elements in ``matrix``
are neither ints nor floats.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [9, "str", 7]
    ... ]
    >>> print(matrix_divided(matrix, 6))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


All the rows in ``matrix`` must be the same size. If not TypeError is raised.

::

    >>> matrix = [
    ...     [1, 2],
    ...     [5, 6, 7]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Invalid Divisors
================

``div`` must be either an int or float. if not, a TypeError is raised.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, "nnnn"))
    Traceback (most recent call last):
    TypeError: div must be a number

::

    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
    TypeError: div must be a number

``div`` must also be non-zero. Otherwise, a ZeroDivisionError is raised.

::

    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
