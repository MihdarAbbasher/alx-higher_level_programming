===========================
How to Use 0-add_integer.py
===========================

This module defines a function of integer addition ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(4, 6)
    10

::

    >>> add_integer(5, -3)
    2

The function also works with float values.

::

    >>> add_integer(2.0, 1.0)
    3

Float values are casted to int values before addition.

::

    >>> add_integer(3.8, 0.3)
    3

::

    >>> add_integer(-1.7, -0.2)
    -1

Floating and int values can be added.

::

    >>> add_integer(2.3, -3)
    -1

The second argument is optional, 98 by default.

::

    >>> add_integer(1)
    99

Non Number values
==================

``add_integer()`` expects integer or float.
If not, TypeError is raised:

::

    >>> add_integer("mh", 8)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(12, "hi")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError is raised for the first argument.

::

    >>> add_integer("mm", "aa")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will not add if a or b is infinity.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

NaN numbers:

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(90, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
